dependencies {
    compile project(':debop4k-config')
    compile project(':debop4k-core')
    compile project(':debop4k-science')

    compile "org.mongodb:mongodb-driver:$mongo_java_driver"

    compile "org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version"
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:$spring_boot_version") {
        exclude(module: 'spring-data-mongodb')
    }
    compile "org.springframework.data:spring-data-mongodb:$spring_data_mongodb_version"
    compile "com.querydsl:querydsl-mongodb:$querydsl_version"
    compile "com.querydsl:querydsl-apt:$querydsl_version"

    testCompile project(':debop4k-timeperiod')
}

sourceSets {
    generated.java.srcDirs = ['src/main/generated']
    testGenerated.java.srcDirs = ['src/test/generated']
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

task testGenerateQueryDSL(type: JavaCompile, group: 'verification', description: 'Generates the Test QueryDSL query types') {
    source = [sourceSets.main.java, sourceSets.test.java]
    classpath = configurations.testCompile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor"
    ]
    destinationDir = sourceSets.testGenerated.java.srcDirs.iterator().next()
}

compileTestJava {
    dependsOn testGenerateQueryDSL
    source += testGenerateQueryDSL.destinationDir
}

compileTestGeneratedJava {
    dependsOn testGenerateQueryDSL
    options.warnings = false
    classpath += sourceSets.test.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
    delete sourceSets.testGenerated.java.srcDirs
}

idea {
    module {
        sourceDirs += file("src/generated/java")
        testSourceDirs += file("src/test-generated/java")
    }
}

/*
 * Copyright (c) 2016. Sunghyouk Bae <sunghyouk.bae@gmail.com>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Spring Boot AutoConfigure 처리
// http://docs.spring.io/spring-boot/docs/1.3.5.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
compileJava.dependsOn(processResources)
compileKotlin.dependsOn(processResources)