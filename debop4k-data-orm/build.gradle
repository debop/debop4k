/*
 * Copyright (c) 2016. Sunghyouk Bae <sunghyouk.bae@gmail.com>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

dependencies {

    compile project(":debop4k-data")
    compile project(":debop4k-timeperiod")
    compile project(":debop4k-redis")

    compile "org.springframework.boot:spring-boot-autoconfigure:$spring_boot_version"
    optional "org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version"

    compile "org.springframework.boot:spring-boot-starter-aop:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    compile "org.springframework.data:spring-data-commons:$spring_data_commons_version"
    compile "org.springframework.data:spring-data-jpa:$spring_data_jpa_version"

    compile "org.springframework:spring-orm:$spring_version"
    compile "org.springframework:spring-tx:$spring_version"

    compile "org.hibernate:hibernate-core:$hibernate_version"
    compile "org.hibernate:hibernate-entitymanager:$hibernate_version"
    compile "org.hibernate:hibernate-spatial:$hibernate_version"
    compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:$hibernate_jpa_2_1_api_version"
    compile "org.hibernate:hibernate-validator:$hibernate_validator_version"

    compile "javax.el:javax.el-api:$javax_el_api_version"

    compile "com.github.debop:hibernate-redis:$hibernate_redis_version"

    compile("com.querydsl:querydsl-jpa:$querydsl_version") {
        exclude(module: 'jsr305')
    }
    compile("com.querydsl:querydsl-jpa-codegen:$querydsl_version") {
        exclude(module: 'hibernate-jpa-2.0-api')
    }
    testCompile("org.hibernate:hibernate-testing:$hibernate_version") {
        exclude(module: 'log4j')
    }

    optional "org.hibernate:hibernate-validator:$hibernate_validator_version"
    optional "org.hibernate:hibernate-validator-annotation-processor:$hibernate_validator_version"
    optional "commons-validator:commons-validator:$commons_validator_version"

    testCompile "com.h2database:h2:$h2_version"
    testCompile "org.hsqldb:hsqldb:$hsqldb_version"
    testCompile "mysql:mysql-connector-java:$mysql_connector_java_version"
    testCompile "org.mariadb.jdbc:mariadb-java-client:$mariadb_version"
    testCompile "org.postgresql:postgresql:$postgresql_version"

    provided("com.querydsl:querydsl-apt:$querydsl_version") {
        exclude(module: 'hibernate-jpa-2.0-api')
    }

    compile "org.jinq:jinq-jpa:1.8.17"
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/java']
    main.java.srcDirs = ['src/main/java']

    generated.java.srcDirs = ['build/generated/java']
    testGenerated.java.srcDirs = ['build/generated/test']
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn
    generateQueryDSL
    source
    generateQueryDSL.destinationDir

}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath

}

task testGenerateQueryDSL(type: JavaCompile, group: 'verification', description: 'Generates the Test QueryDSL query types') {
    source = [sourceSets.main.java, sourceSets.test.java]
    classpath = configurations.testCompile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.testGenerated.java.srcDirs.iterator().next()
}

compileTestJava {
    dependsOn testGenerateQueryDSL
    source += testGenerateQueryDSL.destinationDir

}

compileTestGeneratedJava {
    dependsOn testGenerateQueryDSL
    options.warnings = false
    classpath += sourceSets.test.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
    delete sourceSets.testGenerated.java.srcDirs
}
idea {
    module {
        sourceDirs += file("build/generated/java")
        testSourceDirs += file("build/generated/test")

    }
}