/*
 * Copyright (c) 2016. Sunghyouk Bae <sunghyouk.bae@gmail.com>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

group = 'com.github.debop'
version = '0.0.1-SNAPSHOT'

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

    if (name.endsWith("java8")) {
        println("Project ${name} set to Java 8")
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    } else if (name.endsWith("java7")) {
        println("Project ${name} set to Java 7")
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    } else if (name.endsWith("java6")) {
        println("Project ${name} set to Java 6")
        sourceCompatibility = JavaVersion.VERSION_1_6
        targetCompatibility = JavaVersion.VERSION_1_6
    } else {
        println("Project ${name} set to JDK 8 (default, likely pom-only project)")
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.compilerArgs << '-Xlint:unchecked'
    }

    idea.module {
        downloadJavadoc = false
        downloadSources = true
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    compileJava.dependsOn processResources
//    processResources.dependsOn cleanResources

    artifacts.archives packageSources

    test {
        ignoreFailures true
        // JVM 버전에 따라 빌드가 실패할 수도 있어서
        // jvmArgs "-XX:MaxPermSize=512m"
    }

    repositories {
        maven { url "http://nexus.kesti.co.kr/content/groups/public" }

        mavenLocal()
        jcenter()
        mavenCentral()

        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "http://repo.spring.io/release" }
        maven { url "http://download.osgeo.org/webdav/geotools" }
        maven { url "http://maven.geotoolkit.org/" }
        maven { url "https://code.lds.org/nexus/content/groups/main-repo" }
        maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
        maven { url "https://maven.open-web.nl/content/groups/public/" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        compile "org.slf4j:slf4j-api:$slf4j_version"
        compile "ch.qos.logback:logback-classic:$logback_version"
        compile "javax.inject:javax.inject:$javax_inject_version"

        testCompile "junit:junit:$junit_version"
        testCompile "org.assertj:assertj-core:$assertj_core_version"
        testCompile "org.assertj:assertj-joda-time:$assertj_joda_time_version"
        testCompile "org.projectlombok:lombok:$lombok_version"

        testCompile "io.kotlintest:kotlintest:$kotlintest_version"


        testCompile("org.springframework.boot:spring-boot-starter:$spring_boot_version") {
            exclude(module: 'commons-logging')
            exclude(module: 'spring-context')
        }
        testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version") {
            exclude(module: 'commons-logging')
            exclude(module: 'spring-test')
        }
        testCompile("org.springframework:spring-context:$spring_version")
        testCompile("org.springframework:spring-test:$spring_version")
    }
}

defaultTasks 'clean', 'jar'

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}







