/*
 * Copyright (c) 2016. Sunghyouk Bae <sunghyouk.bae@gmail.com>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"

        // 참고: https://github.com/spring-gradle-plugins/dependency-management-plugin
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    }
}


if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

group = 'com.github.debop'
version = '0.0.1-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

// maven dependencyManagement와 같은 기능
    apply plugin: "io.spring.dependency-management"

    repositories {
        maven { url "http://nexus.kesti.co.kr/content/groups/public" }
        mavenLocal()
        jcenter()
        mavenCentral()

        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "http://repo.spring.io/release" }
        maven { url "http://download.osgeo.org/webdav/geotools" }
        maven { url "http://maven.geotoolkit.org/" }
        maven { url "https://code.lds.org/nexus/content/groups/main-repo" }
        maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
        maven { url "https://maven.open-web.nl/content/groups/public/" }
        maven { url "http://www.gridgainsystems.com/nexus/content/repositories/external" }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:$spring_boot_version"
        }

        dependencies {
            dependency "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            dependency "nl.komponents.kovenant:kovenant:$kovenant_version"

            dependency "org.slf4j:slf4j-api:$slf4j_version"
            dependency "ch.qos.logback:logback-classic:$logback_version"
            dependency "com.google.code.findbugs:jsr305:$jsr305_version"
            dependency "javax.inject:javax.inject:$javax_inject_version"
            dependency "javax.servlet:javax.servlet-api:$javax_servlet_api_version"

            dependency "junit:junit:$junit_version"
            dependency "org.assertj:assertj-core:$assertj_core_version"
            dependency "org.projectlombok:lombok:$lombok_version"

            dependency "org.eclipse.collections:eclipse-collections:$eclipse_collections_version"
            dependency "com.google.guava:guava:$guava_version"
            dependency "joda-time:joda-time:$joda_time_version"
            dependency "org.joda:joda-convert:$joda_convert_version"

            dependency "org.xerial.snappy:snappy-java:$snappy_java_version"

            dependency "org.mapstruct:mapstruct:$mapstruct_version"
            dependency "org.mapstruct:mapstruct-processor:$mapstruct_version"

            // apache commons
            dependency "commons-codec:commons-codec:$commons_codec_version"
            dependency "org.apache.commons:commons-lang3:$commons_lang3_version"
            dependency "org.apache.commons:commons-math3:$commons_math3_version"
            dependency "org.apache.commons:commons-compress:$commons_compress_version"
            dependency "org.apache.commons:commons-collections4:$commons_collections4_version"
            dependency "commons-io:commons-io:$commons_io_version"
            dependency "org.apache.commons:commons-csv:$commons_csv_version"
            dependency "org.apache.commons:commons-pool2:$commons_pool2_version"
            dependency "commons-net:commons-net:$commons_net_version"
            dependency "org.apache.commons:commons-exec:$commons_exec_version"
            dependency "commons-validator:commons-validator:$commons_validator_version"

            // Json
            dependency "org.xerial.snappy:snappy-java:$snappy_java_version"
            dependency "org.jasypt:jasypt:$jasypt_version"
            dependency "com.fasterxml.jackson.core:jackson-core:$jackson_version"
            dependency "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
            dependency "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
            dependency "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_version"

            dependency "com.google.code.gson:gson:$gson_version"

            dependency "org.springframework:spring-core:$spring_version"
            dependency "org.springframework:spring-context:$spring_version"
            dependency "org.springframework:spring-aop:$spring_version"
            dependency "org.springframework:spring-beans:$spring_version"
            dependency "org.springframework:spring-jdbc:$spring_version"
            dependency "org.springframework:spring-expression:$spring_version"
            dependency "org.springframework:spring-tx:$spring_version"
            dependency "org.springframework:spring-web:$spring_version"
            dependency "org.springframework:spring-webmvc:$spring_version"
            dependency("org.springframework:spring-test:$spring_version")

            dependency "org.springframework.boot:spring-boot-starter:$spring_boot_version"
            dependency "org.springframework.boot:spring-boot-starter-jpa:$spring_boot_version"
            dependency "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
            dependency "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
            dependency "org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version"

            dependency "org.springframework.security:spring-security-web:$spring_security_version"
            dependency "org.springframework.security:spring-security-config:$spring_security_version"


            dependency "org.apache.tomcat:tomcat-jdbc:$tomcat_jdbc_version"
            dependency "com.h2database:h2:$h2_version"
            dependency "org.hsqldb:hsqldb:$hsqldb_version"
            dependency "mysql:mysql-connector-java:$mysql_connector_java_version"

            dependency "io.reactivex:rxjava:$rxjava_version"
            dependency "com.github.davidmoten:rxjava-jdbc:$rxjava_jdbc_version"

            dependency "org.redisson:redisson:$redisson_version"

            dependency "net.jpountz.lz4:lz4:$lz4_version"
            dependency "com.fatboyindustrial.gson-jodatime-serialisers:gson-jodatime-serialisers:$gson_jodatime_serialisers_version"

            dependency "org.jscience:jscience:4.3.1"
            dependency "org.jblas:jblas:1.2.4"
            dependency "com.univocity:univocity-parsers:1.5.6"

            dependency "com.jhlabs:javaproj:1.0.6"
            dependency "org.osgeo:proj4j:0.1.0"
            dependency "com.esri.geometry:esri-geometry-api:1.2.1"
            dependency("org.geotools:gt-shapefile:11.5") {
                exclude(module: 'jai_core')
            }
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib"
        compile "org.jetbrains.kotlin:kotlin-reflect"

        testCompile "org.jetbrains.kotlin:kotlin-test"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit"

        compile "org.slf4j:slf4j-api"
        compile "ch.qos.logback:logback-classic"
        compile "javax.inject:javax.inject"
        compile "com.google.code.findbugs:jsr305"

        testCompile "junit:junit"
        testCompile "org.assertj:assertj-core"
        testCompile "org.projectlombok:lombok"

        testCompile("org.springframework.boot:spring-boot-starter") {
            exclude(module: 'commons-logging')
            exclude(module: 'spring-context')
        }
        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude(module: 'commons-logging')
            exclude(module: 'spring-test')
        }
        testCompile("org.springframework:spring-context")
        testCompile("org.springframework:spring-test")

        testCompile 'org.mockito:mockito-all:2.0.2-beta'
        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile "com.nhaarman:mockito-kotlin:0.5.2"
    }



    if (name.endsWith("java8")) {
        println("Project ${name} set to Java 8")
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    } else if (name.endsWith("java7")) {
        println("Project ${name} set to Java 7")
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    } else if (name.endsWith("java6")) {
        println("Project ${name} set to Java 6")
        sourceCompatibility = JavaVersion.VERSION_1_6
        targetCompatibility = JavaVersion.VERSION_1_6
    } else {
        println("Project ${name} set to JDK 8 (default, likely pom-only project)")
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.compilerArgs << '-Xlint:unchecked'
    }

    idea.module {
        downloadJavadoc = false
        downloadSources = true
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    compileJava.dependsOn processResources
//    processResources.dependsOn cleanResources

    artifacts.archives packageSources

    test {
        // ignoreFailures true
        // JVM 버전에 따라 빌드가 실패할 수도 있어서
        // jvmArgs "-XX:MaxPermSize=512m"
    }
}

defaultTasks 'clean', 'jar'

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}







